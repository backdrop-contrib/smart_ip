<?php

/**
 * @file
 * Installation callback for Smart IP.
 */
define('SMART_IP_MINIMUM_PHP', '5.4');

/**
 * Implements hook_requirements().
 *
 * @see smart_ip_admin_settings()
 */
function smart_ip_requirements($phase = 'runtime') {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  // Test PHP version
  $requirements['smart_ip_php'] = array(
    'title' => $t('PHP'),
    'value' => ($phase == 'install') ? phpversion() : l(phpversion(), 'admin/reports/status/php'),
  );
  if (version_compare(phpversion(), SMART_IP_MINIMUM_PHP) < 0) {
    $requirements['smart_ip_php']['description'] = $t('Your PHP installation is too old. Smart IP requires at least PHP %version.', array('%version' => SMART_IP_MINIMUM_PHP));
    $requirements['smart_ip_php']['severity'] = REQUIREMENT_ERROR;
  }  

  if ($phase == 'runtime') {
    $config = config('smart_ip.settings');
    $correct_key = $config->get('smart_ip_correct_ipinfodb_key');
    if (!$correct_key) {
      $smart_ip_source = $config->get('smart_ip_source');
      if ($smart_ip_source == 'ipinfodb_service') {
        // Generate an appropriate error message:
        // Missing API keys.
        $ipinfodb_key = $config->get('smart_ip_ipinfodb_key');
        if (empty($ipinfodb_key)) {
          $requirements['smart_ip'] = array(
            'title'       => 'IPInfoDB API key',
            'severity'    => REQUIREMENT_ERROR,
            'value'       => t('Not configured'),
            'description' => t('The IPInfoDB API key is not configured yet. Visit Smart IP settings !page.', array(
              '!page' => l(t('page'), 'admin/config/people/smart_ip'),
            )),
          );
        }
        else {
          $response = backdrop_http_request(smart_ip_get_ipinfodb_url($ipinfodb_key, '127.0.0.1'));
          if (isset($response->data)) {
            $stat = backdrop_json_decode($response->data);
            if ((isset($stat['Status']) && ($stat['Status'] == 'MISSING API KEY' || $stat['Status'] == 'INVALID API KEY')) || (isset($stat['statusCode']) && ($stat['statusCode'] == 'ERROR'))) {
              $requirements['smart_ip'] = array(
                'title'       => 'IPInfoDB API key',
                'severity'    => REQUIREMENT_ERROR,
                'value'       => t('Invalid'),
                'description' => t('The IPInfoDB API key is invalid. Visit Smart IP settings !page.', array(
                  '!page' => l(t('page'), 'admin/config/people/smart_ip'),
                )),
              );
            }
            else {
              $config->set('smart_ip_correct_ipinfodb_key', TRUE);
              $config->save();
            }
          }
        }
      }
    }
  }
  return $requirements;
} 
 
/**
 * Smart IP schema definition array.
 *
 * @return
 *   A Schema API table definition array.
 */
function smart_ip_schema_definition_array() {
  return array(
    'description' => 'Association between IP range and Geo location',
    'fields' => array(
      'geoip_id' => array(
        'description' => 'ID assigned by maxmind',
        'type'        => 'int',
        'size'        => 'big',
        'not null'    => TRUE,
      ),
      'ip_ref' => array(
        'description' => 'Lowest IP Address in Range',
        'type'        => 'int',
        'size'        => 'big',
        'not null'    => TRUE,
      ),
      'country_code' => array(
        'description' => 'ISO 3166 2-Character Country Code',
        'type'        => 'varchar',
        'length'      => 3,
        'not null'    => TRUE,
      ),
      'region' => array(
        'description' => '2-Character Region Code',
        'type'        => 'varchar',
        'length'      => 3,
        'not null'    => FALSE,
      ),
      'city' => array(
        'description' => 'Name of city targeted by the coordinates',
        'type'        => 'varchar',
        'length'      => 128,
        'not null'    => FALSE,
      ),      
      'zip' => array(
        'description' => 'Postal code of targeted by the coordinates',
        'type'        => 'varchar',
        'length'      => 8,
        'not null'    => FALSE,
      ),
      'latitude' => array(
        'description' => 'Latitude',
        'type'        => 'float',
        'size'        => 'big',
        'not null'    => TRUE,
      ),
      'longitude' => array(
        'description' => 'Longitude',
        'type'        => 'float',
        'size'        => 'big',
        'not null'    => TRUE,
      ),
    ),
    'primary key' => array('ip_ref'),
    'indexes' => array(
      'geoip_id' => array('geoip_id'),
    ),
  );
}

/**
 * Implements hook_schema().
 */
function smart_ip_schema() {
  $schema['smart_ip'] = smart_ip_schema_definition_array();
  $schema['cache_smart_ip'] = backdrop_get_schema_unprocessed('system', 'cache');
  $schema['cache_smart_ip']['description'] = 'Cache table for storing temporary data during Smart IP database update.';
  return $schema;
}
